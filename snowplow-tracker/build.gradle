
apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.vanniktech.maven.publish'

jacoco {
    toolVersion = "0.8.5"
}

project.ext {
    archLifecycleVersion = "1.1.1"
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    useLibrary 'android.test.base'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "$project.version"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "TRACKER_LABEL", "\"andr-$project.version\""
            buildConfigField "String", "TRACKER_VERSION", "\"$project.version\""

            testCoverageEnabled = true
        }
        release {
            buildConfigField "String", "TRACKER_LABEL", "\"andr-$project.version\""
            buildConfigField "String", "TRACKER_VERSION", "\"$project.version\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    sourceSets {
        androidTest.manifest.srcFile "src/androidTest/AndroidManifest.xml"
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    // This enables long timeouts required on slow environments
    adbOptions {
        timeOutInMs 10 * 60 * 1000  // Set the timeout to 10 minutes
        installOptions "-d","-t"
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.squareup.okhttp3:okhttp:4.0.0'
    // test
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'com.google.android.gms:play-services-analytics:17.0.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.0.0'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for snowplow-android-core $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.getJavaCompileProvider().get().source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        doFirst { classpath = files(variant.javaCompiler.classpath.files) + files(ext.androidJar) }
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        exclude '**/R.java'
    }
}

coveralls {
    jacocoReportPath "$buildDir/reports/coverage/debug/report.xml"
}

signing {
    def fakeSecret = "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Fw4d"
    def fakePass = "12345678"
    useInMemoryPgpKeys(fakeSecret, fakePass)

//    useInMemoryPgpKeys(System.getenv('SONA_PGP_SECRET'), System.getenv('SONA_PGP_PASSPHRASE'))
//    sign configurations.archives
}

/*
// Deprecated: to fix as explained in https://github.com/vanniktech/gradle-maven-publish-plugin/issues/137
mavenPublish {
    targets {
        uploadArchives {
            releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            repositoryUsername = System.getenv('SONA_USER')
            repositoryPassword = System.getenv('SONA_PASS')
        }
    }
    nexus {
        // baseUrl = "https://oss.sonatype.org/service/local/" // defaults to "https://oss.sonatype.org/service/local/"
        // stagingProfile = "com.snowplowanalytics" // defaults to the SONATYPE_STAGING_PROFILE Gradle property or the GROUP Gradle Property if not set
        repositoryUsername = System.getenv('SONA_USER') // defaults to the mavenCentralRepositoryUsername Gradle Property
        repositoryPassword = System.getenv('SONA_PASS') // defaults to the mavenCentralRepositoryPassword Gradle Property
    }
}
*/

publishing {
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv('SONA_USER')
                password = System.getenv('SONA_PASS')
            }
        }
    }
}

/*
publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId 'com.snowplowanalytics'
            artifactId 'snowplow-android-tracker'
            PUBLISH_VERSION "$project.version"

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            //artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = 'snowplow-android-tracker'
                description = 'Snowplow event tracker for Android 16+. Add analytics to your apps and games.'
                url = 'https://github.com/snowplow/snowplow-android-tracker'
                inceptionYear = '2014'

                packaging = 'aar'
                groupId = 'com.snowplowanalytics'

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    connection = 'https://github.com/snowplow/snowplow-android-tracker.git'
                    url = 'https://github.com/snowplow/snowplow-android-tracker'
                }
                developers {
                    developer {
                        name = 'Snowplow Analytics'
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "sonatype"

            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

            // The username and password we've fetched earlier
            credentials {
                username project.findProperty('sonaUser') ?: System.getenv('SONA_USER')
                password project.findProperty('sonaPass') ?: System.getenv('SONA_PASS')
            }
        }
    }
}
*/

/*
install {
    repositories.mavenInstaller {
        pom.artifactId = 'snowplow-android-tracker'
        pom.version = "$project.version"
        pom.project {
            name = 'snowplow-android-tracker'
            description = 'Snowplow event tracker for Android 16+. Add analytics to your apps and games.'
            url = 'https://github.com/snowplow/snowplow-android-tracker'
            inceptionYear = '2014'

            packaging = 'aar'
            groupId = 'com.snowplowanalytics'

            licenses {
                license {
                    name = 'The Apache Software License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution = 'repo'
                }
            }
            scm {
                connection = 'https://github.com/snowplow/snowplow-android-tracker.git'
                url = 'https://github.com/snowplow/snowplow-android-tracker'
            }
            developers {
                developer {
                    name = 'Joshua Beemster'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_SNOWPLOW_MAVEN_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_SNOWPLOW_MAVEN_API_KEY')

    configurations = ['archives']

    publish = true

    pkg {
        repo = 'snowplow-maven'
        name = 'snowplow-android-tracker'
        group = 'com.snowplowanalytics'
        userOrg = 'snowplow'

        websiteUrl = 'https://github.com/snowplow/snowplow-android-tracker'
        vcsUrl = 'https://github.com/snowplow/snowplow-android-tracker'
        issueTrackerUrl = 'https://github.com/snowplow/snowplow-android-tracker/issues'

        licenses = ['Apache-2.0']

        version.name = "$project.version"
    }
}
*/

repositories {
    mavenCentral()
}

